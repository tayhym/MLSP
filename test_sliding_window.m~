clear all; close all;
% test sliding window
eigenface = getEigenface();
groupimages = dir('group_photos');
i_gimg = 3;
colorimg = imread(strcat('group_photos/',groupimages(i_gimg).name));
gimage = squeeze(mean(colorimg,3)); % mean along r,g,b channels
figure; imagesc(gimage);
% [bs, bl] = sliding_window(gimage,eigenface);

    N = size(eigenface,1);
    M = size(eigenface,2);
    X = size(gimage,1);
    Y = size(gimage,2);
    
    patch_scores = zeros(size(gimage));
    
    % display best scores
    num_candidates = 10; % assume cap of 20 faces
    best_scores = zeros(1,num_candidates);
    best_locations = zeros(2, num_candidates); 
    
    
    nrows = size(gi
    % preprocess test image to normalize mean and variance 
    integralI = cumsum(cumsum(gimage,1),2); % integral image
    patch_sums = zeros(size(gimage));      % sum of nrows by ncols patch                                      
    for i=1:size(gimage,1)-nrows+1          % cornered at pixel i,j 
        for j=1:size(gimage,2)-ncols+1
            a1 = integralI(i,j);
            a2 = integralI(i+nrows-1,j);
            a3 = integralI(i,j+ncols-1);
            a4 = integralI(i+nrows-1,j+ncols-1);
            patch_sums(i,j) = a4-a2-a3+a1;
        end 
    end
    patch_means = patch_sums./(nrows*ncols); 
    
    
    debug = 1;
    
    for i=1:X-N
        for j=1:Y-M
            p_im = gimage(i:i+N-1,j:j+M-1);
            p_m = patch_means(i,j);
            p_m = p_im - p_m;
            patch_scores(i,j) = query_face(p_im, eigenface);
            [best_scores, best_locations] = ...
            add(best_scores,best_locations,patch_scores(i,j),i,j);     
        end 
    end
    %%
   % display the best locations
    if debug
        for i=1:length(best_scores)
            x = best_locations(1,i);
            y = best_locations(2,i);
            patch = gimage(x:x+N-1,y:y+M-1);
            figure; imshow(patch, [min(patch(:)),max(patch(:))]);
        end
    end